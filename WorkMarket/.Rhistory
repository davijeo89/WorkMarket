confint(fit), 3.2175)
confint(fit, 3.2175)
predict(fit, newdata = data.frame(wt=3), interval = "prediction")
predict(fit, newdata = data.frame(wt=3.2175), interval = "prediction")
clc
x=c(3,1,0,4)
y=c(2,2,1,3)
u=lm(y~x)
u
3*0.4 + 1.2
1*0.4 + 1.2
4*0.4 + 1.2
u=lm(y~0)
u
u=lm(x~0)
u
zerosd
zeros
f = read.table('resumetext.txt', strip.white = 1)
f = read.table('resumetext.txt', strip.white = true)
f = read.table("resumetext.txt", strip.white = true)
f = read.table("resumetext.txt", strip.white = TRUE)
f = read.txt("resumetext.txt", strip.white = TRUE)
f = read.lines("resumetext.txt", strip.white = TRUE)
f = scan("resumetext.txt", strip.white = TRUE)
f = scan("resumetext.txt")
tm
?tm
??tm
?read.lines
??read.lines
x = stri_read_lines("resumetext.txt")
readLines("resumetext.txt")
clc
clear
x = readLines("resumetext.txt")
head(x)
help strsplit
help grep
?grep
library(stringr)
library(ggplot)
library(ggplot2)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
version
library(stringr)
library(ggplot2)
library*##Reading the plain text resume, nothing was changed from MS Word. Just copied and pasted.
raw_text = readLines("resumetext.txt") ##This gives a 45-length vector of my resume, i.e. my resume was 45 lines long in plain text format
concate = paste(raw_text, sep='', collapse = '')##Concantates the vector into one line
##We can also use the str_c function
only_alpha = gsub("[^[:alnum:]]", "", concate)##Removing anything but alpha-numeric characters
nums = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "0")##Vector of numbers
Frequency = str_count(str_to_lower(only_alpha), c(letters, nums))##counting the number of each letter, str_to_lower converts everything to lowercase
h = data.frame(Character = c(letters, num), Frequency = Frequency)
setwd("~/")
library*##Reading the plain text resume, nothing was changed from MS Word. Just copied and pasted.
raw_text = readLines("resumetext.txt") ##This gives a 45-length vector of my resume, i.e. my resume was 45 lines long in plain text format
concate = paste(raw_text, sep='', collapse = '')##Concantates the vector into one line
##We can also use the str_c function
only_alpha = gsub("[^[:alnum:]]", "", concate)##Removing anything but alpha-numeric characters
nums = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "0")##Vector of numbers
Frequency = str_count(str_to_lower(only_alpha), c(letters, nums))##counting the number of each letter, str_to_lower converts everything to lowercase
h = data.frame(Character = c(letters, num), Frequency = Frequency)
raw_text = readLines("resumetext.txt") ##This gives a 45-length vector of my resume, i.e. my resume was 45 lines long in plain text format
concate = paste(raw_text, sep='', collapse = '')##Concantates the vector into one line
##We can also use the str_c function
only_alpha = gsub("[^[:alnum:]]", "", concate)##Removing anything but alpha-numeric characters
nums = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "0")##Vector of numbers
Frequency = str_count(str_to_lower(only_alpha), c(letters, nums))##counting the number of each letter, str_to_lower converts everything to lowercase
h = data.frame(Character = c(letters, num), Frequency = Frequency)
h = data.frame(Character = c(letters, nums), Frequency = Frequency)
h
Cggplot(h, aes(x=Characeter, y=Frequency) + geom_bar(stat="identity"))
ggplot(h, aes(x=Characeter, y=Frequency) + geom_bar(stat="identity"))
ggplot(h, aes(x=Characeter, y=Frequency) + geom_bar())
qplot(factor(Character), data=h, geom="bar", fill=factor(character))
ggplot(h, aes(factor(character))) + geom_bar()
ggplot(data=h, aes(x=Character, y=Frequency)) +
geom_bar(stat="identity")
ggplot(data=h, aes(x=Character, y=Frequency, fill=Character)) + geom_bar(stat="identity")
ggplot(data=h, aes(x=Character, y=Frequency, fill=Character)) + geom_bar(stat="identity") + title("Frequency of Alphanumeric Characters in  my Reusme")
ggplot(data=h, aes(x=Character, y=Frequency, fill=Character)) + geom_bar(stat="identity") + main("Frequency of Alphanumeric Characters in  my Reusme")
source('~/CountingVitae.R')
CoutingVitae("resumetext.txt")
source('~/CountingVitae.R')
raw_text = readLines(filename) ##This gives a 45-length vector of my resume, i.e. my resume was 45 lines
CountingVitae("resumetext.txt")
source('~/CountingVitae.R')
CountingVitae("resumetext.txt")
x = read.csv("NYC_Jobs.csv")
x = read.csv("NYC_Jobs.csv", header=TRUE)
x = read.csv("NYC_Jobs.csv", header=TRUE, quote  = "")
View(x)
totaljobs = tapply(x$X..Of.Positions, x$Agency, sum)
totaljobs
max(totaljobs)
?max
data.frame(totaljobs)
y = data.frame(totaljobs)
y = data.frame(totaljobs)
max(y)
y = order(y)
y
y = data.frame(totaljobs)
y = sort(y)
?distinct
y
data.table(y)
install.packages("data.table")
library(data.table)
data.table(y)
?which.ma
?which.max
which.max(y)
y
which.max(y)
type(y)
character(y)
character-class(y)
y[which(y$totaljobs = max(y$totaljobs))]
y[which(y$totaljobs = max(y$totaljobs)), ]
y[which(y$totaljobs == max(y$totaljobs)), ]
data = read.csv("NYC_Jobs.csv", header = TRUE, quote = "") ##This loads the data. There is a header and there
## are quotations in some of the lines
totaljobs = tapply(data$X..Of.Positions, data$Agency, sum)  ##This sums the number of job openings for each
##agency.
max = totaljobs[which(totaljobs$totaljobs == max(totaljobs$totaljobs)), ] ##Finds the agency with the
##most job postings. In this case it is the Dept of Buildings with 501 postings
max
max
mostjobs = totaljobs[which(totaljobs$totaljobs == max(totaljobs$totaljobs)), ] ##Finds the agency with the
totaljobs
data.frame(totaljobs)
totaljobs
totaljobs = tapply(data$X..Of.Positions, data$Agency, sum)  ##This sums the number of job openings for each
##agency.
totaljobs = data.frame(totaljobs)
mostjobs = totaljobs[which(totaljobs$totaljobs == max(totaljobs$totaljobs)), ] ##Finds the agency with the
##most job postings. In this case it is the Dept of Buildings with 501 postings
mostjobs
install.packages("dplyr")
selectd = x %>% select(Agency, X..Of.Positions, Salary.Range.From, Salary.Range.To, Salary.Frequency)
library(dplyr)
selectd = x %>% select(Agency, X..Of.Positions, Salary.Range.From, Salary.Range.To, Salary.Frequency)
selectd
Annum = filter(salaryinfo, Salary.Frequency == "Anual")
Annum = filter(selectd, Salary.Frequency == "Anual")
salaryinfo = x %>% select(Agency, X..Of.Positions, Salary.Range.From, Salary.Range.To, Salary.Frequency, Hours.Shift)
Annum = filter(salaryinfo, Salary.Frequency == "Anual")
Hourly = filter(salaryinfo, Salary.Frequency == "Hourly")
Annum = filter(salaryinfo, Salary.Frequency == "Annual")
Hourly = filter(salaryinfo, Salary.Frequency == "Hourly")
head(Annum)
sorts = Annum[maxMaxHourly = Hourly[max(Salary.Range.From)), ]
]
MaxHourly = Hourly[max(Salary.Range.From)), ]
MaxHourly = Hourly[max(Salary.Range.From), ]
head(Hourly)
MaxHourly = Hourly[Hourly which max(Salary.Range.From)), ]
MaxHourly = Hourly[max(Salary.Range.From)), ]
MaxHourly = Hourly[max(Salary.Range.From), ]
h = data.frame(Hourly)
MaxHourly = h[max(Salary.Range.From), ]
head(h)
MaxHourly = h[max(h$Salary.Range.From), ]
MaxHourly
Hourly
h
View(h)
View(h)
?contains
??contains
MaxHourly = Hourly[max(Hourly$Salary.Range.From), ]
MAxHourly
MaxHourly
MaxHourly = max(Hourly$Salary.Range.From)
MaxHourly
MaxHourly = Hourly[Agency, max(Hourly$Salary.Range.From), ]
MaxHourly = Hourly[Hourly$Agency, max(Hourly$Salary.Range.From), ]
maxx = Hourly[which(Hourly$Salary.Range.From = max(Hourly$Salary.Range.From))]
maxx = Hourly[which(Hourly$Salary.Range.From = max(Hourly$Salary.Range.From)), ]
maxx = Hourly[which(Hourly$Salary.Range.From == max(Hourly$Salary.Range.From)), ]
maxx
max_hourly_from = Hourly[which(Hourly$Salary.Range.From == max(Hourly$Salary.Range.From)), ]
max_hourly_to = Hourly[which(Hourly$Salary.Range.To == max(Hourly$Salary.Range.To)), ]
max_hourly_to
max_hourly_from
salaryinfo = totaljobs %>% select(Agency, X..Of.Positions, Salary.Range.From, Salary.Range.To, Salary.Frequency, Hours.Shift)
totaljobs = data.frame(totaljobs)
clc
head(totaljobs)
jobfilling = data %>% select(Posting.Type, Minimum.Qual.Requirements, Posting.Date)
jobfilling = data.frame(x) %>% select(Posting.Type, Minimum.Qual.Requirements, Posting.Date)
head(jobfilling)
clc
clear
View(jobfilling)
View(jobfilling)
?grep
j = data.frame(jobfilling)
kk = j[which(grep('Master', j, ignore.case = TRUE) == 1), ]
kk
kk = j[which(grep"'Master", j, ignore.case = TRUE) == 1), ]
kk = j[which(grep("Master", j, ignore.case = TRUE) == 1), ]
kk
kk  = grep("Master", j, ignore.case = TRUE)
kk
kk  = grep("Master", j$Minimum.Qual.Requirements, ignore.case = TRUE)
kk
kk = j[which(grep("Master", j$Minimum.Qual.Requirements, ignore.case = TRUE) == 1), ]
kk
head(kk)
kk = j[which(grep("Master", j$Minimum.Qual.Requirements, ignore.case = TRUE), ]
kk = j[which(grep("Master", j$Minimum.Qual.Requirements, ignore.case = TRUE)), ]
kk = j[grep("Master", j$Minimum.Qual.Requirements, ignore.case = TRUE), ]
cdoctors = j[grep(c("docto", "phd", "Ph.D") , j$Minimum.Qual.Requirements, ignore.case = TRUE), ]
cdoctors = j[grep(c("Ph.D") , j$Minimum.Qual.Requirements, ignore.case = TRUE), ]
cdoctors = j[grep(c("PhD") , j$Minimum.Qual.Requirements, ignore.case = TRUE), ]
docint = doctors[grep("interal" , j$PostingType, ignore.case = TRUE),
]
doctors = j[grep("docto" , j$Minimum.Qual.Requirements, ignore.case = TRUE), ] ##There are no postings that list a 'Ph.D' or 'phd'. So only docto* is
docint = doctors[grep("interal" , j$PostingType, ignore.case = TRUE), ]
docint = Masters[grep("interal" , j$PostingType, ignore.case = TRUE), ]
Masters = j[grep("Master", j$Minimum.Qual.Requirements, ignore.case = TRUE), ]
docint = Masters[grep("interal" , j$PostingType, ignore.case = TRUE), ]
View(doctors)
View(doctors)
docint = Masters[grep("internal" , j$PostingType, ignore.case = TRUE), ]
docint = doctors[grep("internal" , j$PostingType, ignore.case = TRUE), ]
docint = doctors[grep("internal" , doctors$PostingType, ignore.case = TRUE), ]
Masters = j[grep("MBA", j$Minimum.Qual.Requirements, ignore.case = TRUE), ]
docint = doctors[grep("internal" , Doctors$PostingType, ignore.case = TRUE), ]
obfilling = data %>% select(Agency, Business.Title, Posting.Type, Minimum.Qual.Requirements, Posting.Date)
Masters = j[grep("Master", j$Minimum.Qual.Requirements, ignore.case = TRUE), ]  ##Since there were only 2 postings (<1% of all postings) which named a MBA so these were ignored.
Doctors = j[grep("docto" , j$Minimum.Qual.Requirements, ignore.case = TRUE), ] ##There are no postings that list a 'Ph.D' or 'phd'. So only docto* is searched for
docint = doctors[grep("internal" , Doctors$PostingType, ignore.case = TRUE), ]
View(Doctors)
docint = Doctors[grep("internal" , Doctors$PostingType, ignore.case = TRUE), ]
jobfilling = data %>% select(Agency, Business.Title, Posting.Type, Minimum.Qual.Requirements, Posting.Date)
Masters = jobfilling[grep("Master", jobfilling$Minimum.Qual.Requirements, ignore.case = TRUE), ]  ##Since there were only 2 postings (<1% of all postings) which named a MBA so these were ignored.
Doctors = jobfilling[grep("docto" , jobfilling$Minimum.Qual.Requirements, ignore.case = TRUE), ] ##There are no postings that list a 'Ph.D' or 'phd'. So only docto* is searched for
docint = Doctors[grep("internal" , Doctors$PostingType, ignore.case = TRUE), ]
jobfilling = data %>% select(Agency, Business.Title, Posting.Type, Minimum.Qual.Requirements, Posting.Date)
data = read.csv("NYC_Jobs.csv", header = TRUE) ##This loads the data. There is a header and there are quotations in some of the lines
library(dplyr)
jobfilling = data %>% select(Agency, Business.Title, Posting.Type, Minimum.Qual.Requirements, Posting.Date)
Masters = jobfilling[grep("Master", jobfilling$Minimum.Qual.Requirements, ignore.case = TRUE), ]  ##Since there were only 2 postings (<1% of all postings) which named a MBA so these were ignored.
Doctors = jobfilling[grep("docto" , jobfilling$Minimum.Qual.Requirements, ignore.case = TRUE), ] ##There are no postings that list a 'Ph.D' or 'phd'. So only docto* is searched for
docint = Doctors[grep("internal" , Doctors$PostingType, ignore.case = TRUE), ]
View(Doctors)
View(Doctors)
docint = Doctors[grep("internal" , Doctors$Posting.Type, ignore.case = TRUE), ]
docint = Doctors[grep("internal" , Doctors$Posting.Type, ignore.case = TRUE), ]
docex = Doctors[grep("external" , Doctors$Posting.Type, ignore.case = TRUE), ]
mastersint = Doctors[grep("internal" , Doctors$Posting.Type, ignore.case = TRUE), ]
mastersex = Doctors[grep("external" , Doctors$Posting.Type, ignore.case = TRUE), ]
install_github("mikeasilva/blsAPI")
install_github("mikeasilva/blsAPI")
install.packages("github")
install.packages("devtools")
install_github("mikeasilva/blsAPI")
library(devtools)
install_github("mikeasilva/blsAPI")
?ifexist
?exist
?exisit
??exists
?exists
if exists(filename) == 0
filename = "resumetext.txt"
else
?if
?
??if
?
exists(filename)
exists(filename)if exists(filename) == 0
filename = "resumetext.txt"
if exists(filename) == 0
filename = "resumetext.txt"
if (!exists(filename))
filename = "resumetext.txt"
clc
source('~/CountingVitae.R')
CountingVitae()
CountingVitae(filename)
source('~/CountingVitae.R')
source('~/CountingVitae.R')
CountingVitae()
if (!exists(filename))
filename = "resumetext.txt"
if (!exists(filename))
fileme = "resumetext.txt"
exists(filename)
exists("filename)
""
"
source('~/CountingVitae.R')
filename = "resumetext.txt"
if (!exists("filename"))
fileme = "resumetext.txt"
else fileme= 1
if (!exists("filename"))
{file = "resumetext.txt"}
else {file= 1}
if (!exists("filename"))
{file = "resumetext.txt"} else {file= 1}
if (!exists("filename"))
{file = "resumetext.txt"} else {file= 1}
source('~/CountingVitae.R')
source('~/CountingVitae.R')
CountingVitae()
CountingVitae("resumetext.txt")
?blsapi
?blsAPI
install_github("mikeasilva/blsAPI")
??blsAPI
temp = tempfile()
x =download.file("http://www.bls.gov/cps/cpsaat44.htm", temp)
x
library(stringr)
library(ggplot2)
filename = "resumetext.txt"
raw_text = readLines(filename) ##This gives a 45-length vector of my resume, i.e. my resume was 45 lines long in plain text format
library(stringr)
library(ggplot2)
filename = "resumetext.txt"
raw_text = readLines(filename) ##This gives a 45-length vector of my resume, i.e. my resume was 45 lines long in plain text format
concate = paste(raw_text, sep='', collapse = '')##Concantates the vector into one line
##We can also use the str_c function
only_alpha = gsub("[^[:alnum:]]", "", concate)##Removing anything but alpha-numeric characters
nums = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "0")##Vector of numbers
Frequency = str_count(str_to_lower(only_alpha), c(letters, nums))##counting the number of each letter and numbers, str_to_lower converts everything to lowercase
h = data.frame(Character = c(letters, nums), Frequency = Frequency)##GGplot is weird in how it requies its data so this just converts the data into a neccessary dataframe
##making a visually appealing plot
ggplot(data=h, aes(x=Character, y=Frequency, fill=Character)) +
geom_bar(stat="identity") + ggtitle("Frequency of Alphanumeric Characters in  my Resume")
avg(2, 3, 4)
mean(4,5,6)
mean(4,5,64)
?mean
mean(c(4,5,64)
)
data = read.csv("NYC_Jobs.csv", header = TRUE) ##This loads the data. There is a header and there are quotations in some of the lines
library(dplyr)
data = read.csv("NYC_Jobs.csv", header = TRUE) ##This loads the data. There is a header and there are quotations in some of the lines
library(dplyr)
salaryinfo = data %>%
select(Agency, Salary.Range.From, Salary.Range.To, Salary.Frequency, Hours.Shift) %>%
mutate(AveragePay = mean(Salary.Range.From, Salary.Range.To))
salaryinfo = data %>%
select(Agency, Salary.Range.From, Salary.Range.To, Salary.Frequency, Hours.Shift) %>%
mutate(AveragePay = mean(c(Salary.Range.From, Salary.Range.To)))
View(salaryinfo)
View(salaryinfo)
max_annual_avg = Annum[which(Annum$AveragePay == max(Annum$AveragePay)), ]
Annum = filter(salaryinfo, Salary.Frequency == "Annual")
max_annual_avg = Annum[which(Annum$AveragePay == max(Annum$AveragePay)), ]
View(max_annual_avg)
View(max_annual_avg)
salaryinfo = data %>%
select(Agency, Salary.Range.From, Salary.Range.To, Salary.Frequency, Hours.Shift) %>%
mutate(AveragePay = lapply(c(Salary.Range.From, Salary.Range.To), mean)) ##mutate adds the average salary col
salaryinfo = data %>%
select(Agency, Salary.Range.From, Salary.Range.To, Salary.Frequency, Hours.Shift) %>%
mutate(AveragePay = lapply(c(Salary.Range.From, Salary.Range.To), mean)) ##mutate adds the average salary col
salaryinfo = data %>%
select(Agency, Salary.Range.From, Salary.Range.To, Salary.Frequency) %>% unique()
salaryinfo = data %>%
select(Agency, Salary.Range.From, Salary.Range.To, Salary.Frequency)
View(salaryinfo)
View(salaryinfo)
jobfilling = data %>% select(Agency, Business.Title, Posting.Type, Minimum.Qual.Requirements, Posting.Date)
Masters = jobfilling[grep("Master", jobfilling$Minimum.Qual.Requirements, ignore.case = TRUE), ]  ##Since there were only 2 postings (<1% of all postings) which named a MBA so these were ignored.
Doctors = jobfilling[grep("docto" , jobfilling$Minimum.Qual.Requirements, ignore.case = TRUE), ] ##There are no postings that list a 'Ph.D' or
postings = Masters[order(Masters$Posting.Date, Masters$Agency,), ]
postings = Masters[order(Masters$Posting.Date, Masters$Agency), ]
View(postings)
View(postings)
?order
postings = Masters[order(Masters$Posting.Date, Masters$Agency, decreasing = FALSE), ]
head(postings)
View(postings)
View(postings)
postings = Masters[order(Masters$Posting.Date, Masters$Agency, decreasing = TRUE), ]
View(postings)
View(postings)
postings = Masters[order(Masters$Posting.Date, decreasing = TRUE), ]
View(postings)
View(postings)
postings = Masters[order(as.date(Masters$Posting.Date), decreasing = TRUE), ]
postings = Masters[order(as.Date(Masters$Posting.Date), decreasing = TRUE), ]
install.packages("lubridate")
library(lubridate)
jobfilling$Posting.Date = dmy(jobfilling$Posting.Date)
?dmy
character.class(jobfilling$Posting.Date)
head(jobfilling$Posting.Date)
data = read.csv("NYC_Jobs.csv", header = TRUE, colClasses = "character")
?read.csv
data = read.csv("NYC_Jobs.csv", header = TRUE, stringAsFactors = TRUE)
data = read.csv("NYC_Jobs.csv", header = TRUE, quote="")
data = read.csv("NYC_Jobs.csv", header = TRUE)
clc
clear
temp = tempfile()
data = loadURL("http://api.bls.gov/publicAPI/v2/timeseries/data/LNS14000000'", temp)
data = url("http://api.bls.gov/publicAPI/v2/timeseries/data/LNS14000000'", temp)
data = url("http://api.bls.gov/publicAPI/v2/timeseries/data/LNS14000000", temp)
data = url("http://api.bls.gov/publicAPI/v2/timeseries/data/LNS14000000")
?url
d = download.file(data)
d = download.file(data, temp)
?download.file
data = url("http://api.bls.gov/publicAPI/v2/timeseries/data/LNS14000000.xlsx")
d = download.file(data, temp)
library(devtools)
install_github("mikeasilva/blsAPI")
library(blsAPI)
response <- blsAPI('LNS14000000')
response <- blsAPI('LNS14000000')
response <- blsAPI('LAUCN040010000000005')
json <- fromJSON(response)
library(rjson)
library(blsAPI)
response <- blsAPI('LAUCN040010000000005')
response <- blsAPI('LNS14000000')
json <- fromJSON(response)
json
apiDF <- function(data){
df <- data.frame(year=character(),
period=character(),
periodName=character(),
value=character(),
stringsAsFactors=FALSE)
i <- 0
for(d in data){
i <- i + 1
df[i,] <- unlist(d)
}
return(df)
}
unemployed.df <- apiDF(json$Results$series[[1]]$data)
View(unemployed.df)
View(unemployed.df)
payload <- list(
'seriesid'=c('LNS14000000'),
'startyear'=1948,
'endyear'=2015)
response <- blsAPI(payload, 2)
json <- fromJSON(response)
response <- blsAPI(payload, 1)
json <- fromJSON(response)
unemployed.df <- apiDF(json$Results$series[[1]]$data)
knit("LaborUnemployment.rmd", "LaborUnemployment.md")
library(knitr)
knit("LaborUnemployment.rmd", "LaborUnemployment.md")
knit("LaborUnemployment.Rmd", "LaborUnemployment.md")
setwd("C:/Users/David/Documents")
knit("LaborUnemployment.Rmd", "LaborUnemployment.md")
setwd("C:/Users/David/Documents/GithubStuff/WorkMarket")
knit("LaborUnemployment.Rmd", "LaborUnemployment.md")
data = read.csv("NYC_Jobs.csv", header = TRUE) ##This loads the data. There is a header and there are quotations in some of the lines
library(dplyr)
library(lubridate)
data = readLines("NYC_Jobs.csv", header = TRUE)
data = readLines("NYC_Jobs.csv"]\)
data = readLines("NYC_Jobs.csv")
datas = readLines("NYC_Jobs.csv")
data = read.csv("NYC_Jobs.csv", header = TRUE)
data = read.csv("NYC_Jobs.csv", header = TRUE, quote="")
?dmy
data = read.csv("labor.csv", header = TRUE)
data=data.frame(data)
data$Time = dmy(data$Time)
View(data)
View(data)
data = read.csv("labor.csv", header = TRUE)
View(data)
View(data)
data$Time = dmy(data$Time)
data = read.csv("labor.csv", header = TRUE)
data$Time = ymd(data$Time)
View(data)
View(data)
data = read.csv("labor.csv", header = TRUE)
data=data.frame(data)
data$Time = ymd(data$Time)
library(ggplot2)
library(lubridate)
##Reading the data
data = read.csv("labor.csv", header = TRUE)
data=data.frame(data)
data$Time = ymd(data$Time)
data = read.csv("labor.csv", header = TRUE)
data=data.frame(data)
data$Time = ymd(data$Time)
a = ggplot(data = data, aes(x = Time, y = Productivity, ymax = 25, ymin = -15, color=Productivity)) + geom_bar(stat = "identity")
a = a + geom_line(data=data, aes(x=Time, y=Unemployment, group= 1), colour="red")
a
Start = ymd(c("1948-10-01", "1953-07-01", "1957-07-01", "1960-04-01", "1969-10-01", "1973-10-01", "1980-01-01", "1981-07-01", "1990-07-01", "2001-04-01", "2008-01-01"))
End =   ymd(c("1949-10-01", "1954-04-01", "1958-04-01", "1961-01-01", "1970-10-01", "1975-04-01", "1980-07-01", "1982-10-01", "1991-04-01", "2001-10-01", "2009-07-01"))
Recessions <- data.frame(xmin=Start, xmax=End, ymin=-Inf, ymax=Inf)
a = a + geom_rect(data=Recessions, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), alpha=0.5, inherit.aes = FALSE)
a + ggtitle("Labor Productivity in US and Unemployment Rate") + xlab("Quarters from 1948-20015") + ylab("%Change in Labor Producivity from Previous Quarter, Unemployment Rate %")
UpdateR()
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
